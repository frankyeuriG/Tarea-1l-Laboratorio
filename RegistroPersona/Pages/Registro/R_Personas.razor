@page "/persona"
@page "/persona/{PersonaId:int}"

@inject PersonasBLL PersonasBLL
@inject NotificationService notificationService
@inject OcupacionesBLL ocupacionBLL

<EditForm Model="persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>
        <div class="card-body">
            <form>
                @*PersonaId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PersonaId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="persona.PersonaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                @*Nombres*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="persona.Nombres" class="form-control" />
                    <ValidationMessage For="@(() => persona.Nombres)" />
                </div>
                 @*Direccion*@
                <div class="form-group">
                    <label>Direccion</label>
                    <InputText @bind-Value="persona.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => persona.Direccion)" />
                </div>

                @*Email*@
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="persona.Email"
                                 class="form-control" />
                    <ValidationMessage For="@(() => persona.Email)" />
                </div>
                @*FechaNacimiento*@
                <div class="form-group">
                    <label>Fecha De Nacimiento</label>
                    <InputDate @bind-Value="persona.FechaNacimiento"
                                 class="form-control" />
                    <ValidationMessage For="@(() => persona.FechaNacimiento)" />
                </div>
                @*Telefono*@
                <div class="form-group">
                    <label>Telefono</label>
                    <InputText @bind-Value="persona.Telefono"
                                 class="form-control" />
                    <ValidationMessage For="@(() => persona.Telefono)" />
                </div>
                <div class="form-group col">
                    <label >Ocupaciones</label>
                    <InputSelect class="form-select" @bind-Value="persona.OcupacionId">
                        @foreach (Ocupaciones persona in lista)
                        {
                            <option value="@persona.OcupacionId">@persona.Descripcion (ID: @persona.OcupacionId)</option>
                        }
                    </InputSelect>
                </div>

            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PersonaId { get; set; }

    public Personas persona { get; set; } = new Personas();
  
    public String mensaje { get; set; } = "";
    public List<Ocupaciones> lista { get; set; } = new List<Ocupaciones>();

   

    protected override void OnInitialized()
    {
        if (PersonaId > 0)
        {
           
            this.persona.PersonaId = PersonaId;
            this.Buscar();
        }lista = ocupacionBLL.GetList(o => true);
    }

    public void Nuevo()
    {
        mensaje = "";
        persona = new Personas();
    }

    bool Validar()
    {
        return persona.Nombres.Contains(".");
    }

    public void Guardar()
    {
        bool guardo;
        
        if (!Validar())
        {
            mensaje = "hay errores, favor corregir";
            return;
        }


        guardo = PersonasBLL.Guardar(persona);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
            
            Nuevo();
            
        }
        
    }
    private void Buscar()
    {
        if (persona.PersonaId > 0)
        {
            var encontrado = PersonasBLL.Buscar(persona.PersonaId);

            if (encontrado != null)
                this.persona = encontrado;
            
        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PersonasBLL.Eliminar(persona);

        if (elimino)
        {
            Nuevo();
            
        }
        
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}

   



